// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    username,
    refresh_token,
    user_agent,
    ip_address,
    expires_at,
    created_at,
    is_blocked

) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, refresh_token, username, user_agent, ip_address, expires_at, created_at, is_blocked
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	IpAddress    string    `json:"ip_address"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
	IsBlocked    bool      `json:"is_blocked"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.IpAddress,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.IsBlocked,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.Username,
		&i.UserAgent,
		&i.IpAddress,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.IsBlocked,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, refresh_token, username, user_agent, ip_address, expires_at, created_at, is_blocked FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.Username,
		&i.UserAgent,
		&i.IpAddress,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.IsBlocked,
	)
	return i, err
}
